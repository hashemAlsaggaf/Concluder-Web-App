
    Libraries and resources Used: 
	- http://fperucic.github.io/treant-js/ (Tree representation)
	- jQuery https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js 
	- https://www.freepik.com/ (icons and images) Icons Authors: 
	- https://www.flaticon.com/authors/eleonor-wang (add icon)
    - https://www.flaticon.com/authors/hadrien (menu icon) 
	- https://www.flaticon.com/authors/daniel-bruce (data tree icon)
    - https://www.flaticon.com/authors/pixel-perfect (analyze icon)
	- https://www.flaticon.com/authors/dmitriy-chuta (Reverse icon)
   Developing tools: 
   - Webflow.io (UI design) 
   
   Nodes.js 
	Selecting nodes mechanism (defined in tree configuration (chart_config)):
    every node is created with a unique id the node id is used to select and identify tree nodes when clicked on a node,
    selectedNode variable is updated with the selected node id (using jQuery .attr()) then the findNode function is called to
    search for that node in the tree when the node is found, the targetNode is updated with the selected node after that, we can
    call node function with the target node. 
	
	the tree configuration comply with the library Treant-js Tree Nodes structure: 
	a JSON object 
		{ 
			HTMLid: id, 
			text:	{ 
						name: name, weight: 100
					}, 
			children: [] 
		} 
		
	Functions: 
	- clearSelection input: none
	actions: 
		- clears all nodes background 
		- clears selectedNode variable (assign null) 
		- clears targetNode variable (assign null) 
	output: none
	goal: to clear all nodes background to clear node selection variables 
	
	- findNode 
	input: 	target node id (id) (required)
			node to start the search (currentNode) (required) 
	action: 
		- goes through each node and its children to search for an id 
		- if the target id is not found in current node, recursivly search in all its children 
		- if id is found, return the current node
    output: node if found 
	goal: find a node by id 
	
	- addNode input: target node (target) (required) node name (name) (required)
    action: - make sure we have a target node - make sure we have a non-empty name - add a new child with the input name using the
    appropriate node structure. - assign uniqe id to the node - distribute the weight on all siblings (using distributeWeight
    function) - increase the id counter - prepare a new id for future children - empty the node name input (prepare for new input)
    - re-draw the tree using (new Treant()) output: none goal: to properly add a new node (all nodes has to comply with nodes
    structure) - deleteNode input: node id (required) node to start the search (currentNode) (required) action: - start with
    itiration = 0 - look in every child of this node (while keep tracking of index) - if the input id matches a child id, delete
    that child (using javascript built-in splice function) - after node is deleted, redistribute weight among siblings - if the
    target id is not found, recursivly search in each child output: true if node deleted goal: to delete a node by id -
    distributeWeight input: node (parent) (required) percentage weight (weight) (required) action: - assign dividing factor as the
    number of children - for each child, assign the new weight as the input weigh/factor output: none goal: to properly distribute
    weight among siblings</body>

